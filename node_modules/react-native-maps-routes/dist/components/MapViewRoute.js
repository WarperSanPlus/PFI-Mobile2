"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MapViewRoute = void 0;
const react_1 = __importStar(require("react"));
const react_native_maps_1 = require("react-native-maps");
const decoder_1 = require("../utils/decoder");
const MapViewRoute = (props) => {
    const [coordinates, setCoordinates] = (0, react_1.useState)([]);
    (0, react_1.useEffect)(() => {
        fetchRoute();
    }, [props.origin, props.destination]);
    (0, react_1.useEffect)(() => {
        if (coordinates.length) {
            props.onReady?.(coordinates);
        }
    }, [coordinates]);
    const fetchRoute = () => {
        fetch("https://routes.googleapis.com/directions/v2:computeRoutes", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-Goog-Api-Key": props.apiKey,
                "X-Goog-FieldMask": "routes.polyline.encodedPolyline",
            },
            body: JSON.stringify({
                origin: {
                    location: {
                        latLng: props.origin,
                    },
                },
                destination: {
                    location: {
                        latLng: props.destination,
                    },
                },
                travelMode: props.mode || "WALK",
            }),
        })
            .then((response) => response.json())
            .then((json) => {
            if (json.error) {
                throw json.error;
            }
            const route = json.routes[0];
            setCoordinates((0, decoder_1.decodeRoutesPolyline)(route));
        })
            .catch((error) => {
            props.onError?.(error);
        });
    };
    return (react_1.default.createElement(react_native_maps_1.Polyline, { coordinates: coordinates, strokeColor: props.strokeColor ?? "#000", strokeWidth: props.strokeWidth ?? 6, lineJoin: props.lineJoin ?? "round", lineCap: props.lineCap ?? "round" }));
};
exports.MapViewRoute = MapViewRoute;
